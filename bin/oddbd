#!/usr/bin/env ruby

$: << File.expand_path('../lib', File.dirname(__FILE__))
$KCODE = 'u'

require 'drb'
require 'logger'
require 'oddb/config'
require 'oddb/util/server'
require 'encoding/character/utf-8'


module ODDB
  require File.join('oddb', 'persistence', @config.persistence)
  persistence = nil
  case @config.persistence
  when 'odba'
    DRb.install_id_conv ODBA::DRbIdConv.new
    persistence = ODDB::Persistence::ODBA
  when 'og'
    DRb.install_id_conv DRb::TimerIdConv.new
    Og.setup({
      :name     => @config.db_name,
      :user     => @config.db_user,
      :password => @config.db_auth,
      :store    => @config.db_backend,
      :evolve_schema => true,
      :evolve_schema_cautious => false,
    })
    persistence = ODDB::Persistence::Og
  end
  PERSISTENCE = persistence

  log_file = @config.log_file
  if(log_file.is_a?(String))
    FileUtils.mkdir_p(File.dirname(log_file))
    log_file = File.open(log_file, 'a')
    at_exit { log_file.close }
  end
  logger = Logger.new(log_file)
  logger.level = Logger.const_get(@config.log_level)
  @logger = logger

  begin
    server = ODDB::Util::Server.new
    server.extend(DRbUndumped)
    @server = server

    url = @config.server_url
    url.untaint
    DRb.start_service(url, server)
    $SAFE = 1
    logger.info('start') { 
      sprintf("starting oddb-server on %s", url) }
    DRb.thread.join
  rescue Exception => error
    logger.error('fatal') { error }
    raise
  end
end
