#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "parse.y".
#
#
# lib/quanty/parse.rb: generated by racc (runtime embedded)
#
###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'

self.class.module_eval <<'..end racc/parser.rb modeval..id72f10a7251', 'racc/parser.rb', 1
#
# $Id: parser.rb,v 1.7 2005/11/20 17:31:32 aamine Exp $
#
# Copyright (c) 1999-2005 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.5'
    Racc_Runtime_Revision = '$Revision: 1.7 $'.split[1]

    Racc_Runtime_Core_Version_R = '1.4.5'
    Racc_Runtime_Core_Revision_R = '$Revision: 1.7 $'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = nil
      act = nil
      i = nil
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while not (i = action_pointer[@racc_state[-1]]) or
                not @racc_read_next or
                @racc_t == 0   # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end
..end racc/parser.rb modeval..id72f10a7251
end
###### racc/parser.rb end



# parse.y, quanty/parse.rb
#
#   by Masahiro Tanaka <masa@ir.isas.ac.jp>
#
class Quanty


class Parse < Racc::Parser

module_eval <<'..end parse.y modeval..id3b357f8af2', 'parse.y', 73
  
  def parse( str )
    @q = []

    while str.size > 0 do
      #p str
      case str
      when /\A[\s\n]+/o
      when /\A\d+\.?\d*([eE][+-]?\d+)?/o
        @q.push [:NUMBER, $&.to_f]
      when /\A[A-Za-z_]+([A-Za-z_0-9-]+[A-Za-z_])?/o
        @q.push [:WORD, $&]
      when /\A[$%'"]'?/o
        @q.push [:WORD, $&]
      when /\A\^|\A\*\*/o
        @q.push [:POW, $&]
      when /\A./o
        @q.push [$&,$&]
      end
        str = $'
    end
    @q.push [false, '$end']

    do_parse
  end

  def next_token
    @q.shift
  end

..end parse.y modeval..id3b357f8af2

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 18, :_reduce_none,
 0, 18, :_reduce_2,
 1, 18, :_reduce_3,
 1, 20, :_reduce_none,
 2, 20, :_reduce_5,
 3, 20, :_reduce_6,
 3, 20, :_reduce_7,
 3, 20, :_reduce_8,
 3, 20, :_reduce_9,
 3, 20, :_reduce_10,
 3, 20, :_reduce_11,
 3, 20, :_reduce_12,
 1, 19, :_reduce_none,
 2, 19, :_reduce_14,
 2, 19, :_reduce_15,
 3, 19, :_reduce_16,
 1, 21, :_reduce_none,
 2, 21, :_reduce_18,
 3, 21, :_reduce_19,
 3, 21, :_reduce_20,
 3, 21, :_reduce_21,
 3, 21, :_reduce_22,
 3, 21, :_reduce_23,
 1, 22, :_reduce_none,
 2, 22, :_reduce_25,
 3, 22, :_reduce_26,
 1, 23, :_reduce_27,
 3, 23, :_reduce_28,
 3, 23, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 54

racc_action_table = [
    23,    22,    23,    24,    25,    26,    27,    29,    23,    21,
    39,     5,     6,    23,    23,    23,    24,    25,    26,    27,
    29,    34,    21,    23,     5,     6,    24,    25,    26,    27,
    29,    41,    21,    23,     5,     6,    24,    37,    26,    27,
    29,    38,    40,    39,    31,    32,    33,   nil,    31,    32,
    33,    21,    14,     5,     6,    21,   nil,     5,     6,    12,
     2,    13,     7,   nil,   nil,    12,     2,     4,     7,     5,
     6,    12,     2,     4,     7,     5,     6,    12,     2,     4,
     7,     5,     6,    12,     2,     4,    23,     5,     6,    23,
   nil,    26,    27,    29,    26,    27,    29,    23,   nil,   nil,
    23,   nil,    26,    27,    29,    26,    27,    29,    12,     2,
     4,   nil,     5,     6,    12,     2,     4,    23,     5,     6,
    24,    37,    26,    12,     2,     4,    23,     5,     6,    24,
    37,    26,    21,   nil,     5,     6,    21,   nil,     5,     6,
    12,     2,    13,    12,     2,    13,    12,     2,    13,    12,
     2,    13,    12,     2,    13,    12,     2,    13,    12,     2,
    13,    12,     2,    13 ]

racc_action_check = [
    17,     8,    42,    17,    17,    17,    17,    17,    43,    17,
    17,    17,    17,    19,    45,    46,    19,    19,    19,    19,
    19,    12,    19,    10,    19,    19,    10,    10,    10,    10,
    10,    22,    10,    35,    10,    10,    35,    35,    35,    35,
    35,    16,    18,    35,    28,    28,    28,   nil,    11,    11,
    11,    28,     3,    28,    28,    11,   nil,    11,    11,     3,
     3,     3,    21,   nil,   nil,    21,    21,    21,     6,    21,
    21,     6,     6,     6,     4,     6,     6,     4,     4,     4,
     0,     4,     4,     0,     0,     0,    15,     0,     0,    51,
   nil,    15,    15,    15,    51,    51,    51,    36,   nil,   nil,
    53,   nil,    36,    36,    36,    53,    53,    53,    33,    33,
    33,   nil,    33,    33,    32,    32,    32,    48,    32,    32,
    48,    48,    48,    25,    25,    25,    47,    25,    25,    47,
    47,    47,    31,   nil,    31,    31,     7,   nil,     7,     7,
    29,    29,    29,    13,    13,    13,    23,    23,    23,    14,
    14,    14,    26,    26,    26,    37,    37,    37,    27,    27,
    27,    24,    24,    24 ]

racc_action_pointer = [
    73,   nil,   nil,    49,    67,   nil,    61,   124,     1,   nil,
    20,    43,    10,   133,   139,    83,    28,    -3,    26,    10,
   nil,    55,    31,   136,   151,   113,   142,   148,    39,   130,
   nil,   120,   104,    98,   nil,    30,    94,   145,   nil,   nil,
   nil,   nil,    -1,     5,   nil,    11,    12,   123,   114,   nil,
   nil,    86,   nil,    97 ]

racc_action_default = [
    -2,   -17,    -4,   -24,   -30,   -27,   -30,   -30,   -30,    -1,
    -3,   -13,   -30,   -30,   -30,   -25,   -30,   -30,   -30,   -30,
   -15,   -30,   -30,   -30,   -30,   -30,   -30,   -30,   -14,   -30,
   -18,   -30,   -30,   -30,    -5,   -30,   -26,   -30,   -28,   -12,
   -29,    54,   -11,   -10,   -16,    -9,    -8,    -6,    -7,   -19,
   -20,   -22,   -21,   -23 ]

racc_goto_table = [
    10,    28,     8,    15,    17,     9,   nil,   nil,    28,   nil,
    28,    18,   nil,    35,    36,   nil,   nil,    20,   nil,   nil,
   nil,    30,   nil,    42,    43,    45,    46,    47,   nil,    48,
   nil,   nil,    51,    53,   nil,    44,   nil,    45,    30,   nil,
   nil,    49,    50,    52 ]

racc_goto_check = [
     3,     4,     1,     3,     3,     2,   nil,   nil,     4,   nil,
     4,     2,   nil,     3,     3,   nil,   nil,     5,   nil,   nil,
   nil,     5,   nil,     3,     3,     3,     3,     3,   nil,     3,
   nil,   nil,     3,     3,   nil,     5,   nil,     3,     5,   nil,
   nil,     5,     5,     5 ]

racc_goto_pointer = [
   nil,     2,     5,     0,    -9,    10,   nil ]

racc_goto_default = [
   nil,   nil,    16,    19,    11,     1,     3 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 :POW => 3,
 :UPOW => 4,
 "." => 5,
 "*" => 6,
 "/" => 7,
 "|" => 8,
 "+" => 9,
 "-" => 10,
 :NUMBER => 11,
 "(" => 12,
 ")" => 13,
 :WORD => 14,
 "[" => 15,
 "]" => 16 }

racc_use_result_var = true

racc_nt_base = 17

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'POW',
'UPOW',
'"."',
'"*"',
'"/"',
'"|"',
'"+"',
'"-"',
'NUMBER',
'"("',
'")"',
'WORD',
'"["',
'"]"',
'$start',
'target',
'val',
'num',
'seq',
'exp',
'unit']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'parse.y', 21
  def _reduce_2( val, _values, result )
 result = Quanty::Fact.new
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 22
  def _reduce_3( val, _values, result )
 result = Quanty::Fact.new(val[0])
   result
  end
.,.,

 # reduce 4 omitted

module_eval <<'.,.,', 'parse.y', 26
  def _reduce_5( val, _values, result )
 result = -val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 27
  def _reduce_6( val, _values, result )
 result += val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 28
  def _reduce_7( val, _values, result )
 result -= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 29
  def _reduce_8( val, _values, result )
 result /= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 30
  def _reduce_9( val, _values, result )
 result /= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 31
  def _reduce_10( val, _values, result )
 result *= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 32
  def _reduce_11( val, _values, result )
 result **= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 33
  def _reduce_12( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 13 omitted

module_eval <<'.,.,', 'parse.y', 37
  def _reduce_14( val, _values, result )
 result = val[1].fac!(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 38
  def _reduce_15( val, _values, result )
 result = val[1].pow!(-1)
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 39
  def _reduce_16( val, _values, result )
 result = val[2].pow!(-1).fac!(val[0])
   result
  end
.,.,

 # reduce 17 omitted

module_eval <<'.,.,', 'parse.y', 43
  def _reduce_18( val, _values, result )
 result.mul!(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 44
  def _reduce_19( val, _values, result )
 result.mul!(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 45
  def _reduce_20( val, _values, result )
 result.mul!(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 46
  def _reduce_21( val, _values, result )
 result.div!(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 47
  def _reduce_22( val, _values, result )
 result.fac!(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 48
  def _reduce_23( val, _values, result )
 result.fac!(val[2]**-1)
   result
  end
.,.,

 # reduce 24 omitted

module_eval <<'.,.,', 'parse.y', 52
  def _reduce_25( val, _values, result )
 result.pow!(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 53
  def _reduce_26( val, _values, result )
 result.pow!(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 56
  def _reduce_27( val, _values, result )
 result = Quanty::Fact.new(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 57
  def _reduce_28( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'parse.y', 58
  def _reduce_29( val, _values, result )
 result = val[1]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class Parse


end # class Quanty
